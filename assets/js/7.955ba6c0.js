(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{207:function(n,t,o){"use strict";o.r(t);var e=o(0),v=Object(e.a)({},(function(){var n=this,t=n.$createElement,o=n._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":n.$parent.slotKey}},[o("h1",{attrs:{id:"基础面试题-一"}},[o("a",{staticClass:"header-anchor",attrs:{href:"#基础面试题-一"}},[n._v("#")]),n._v(" 基础面试题 (一)")]),n._v(" "),o("p",[n._v("🎉 💯")]),n._v(" "),o("p",[n._v("JS 基础知识点及常考面试题（一）\nJS 对于每位前端开发都是必备技能，在小册中我们也会有多个章节去讲述这部分的知识。首先我们先来熟悉下 JS 的一些常考和容易混乱的基础知识点。")]),n._v(" "),o("p",[n._v("原始（Primitive）类型\n涉及面试题：原始类型有哪几种？null 是对象嘛？")]),n._v(" "),o("p",[n._v("在 JS 中，存在着 6 种原始值，分别是：")]),n._v(" "),o("p",[n._v("boolean\nnull\nundefined\nnumber\nstring\nsymbol\n首先原始类型存储的都是值，是没有函数可以调用的，比如 undefined.toString()")]),n._v(" "),o("p",[n._v("此时你肯定会有疑问，这不对呀，明明 '1'.toString() 是可以使用的。其实在这种情况下，'1' 已经不是原始类型了，而是被强制转换成了 String 类型也就是对象类型，所以可以调用 toString 函数。")]),n._v(" "),o("p",[n._v("除了会在必要的情况下强转类型以外，原始类型还有一些坑。")]),n._v(" "),o("p",[n._v("其中 JS 的 number 类型是浮点类型的，在使用中会遇到某些 Bug，比如 0.1 + 0.2 !== 0.3，但是这一块的内容会在进阶部分讲到。string 类型是不可变的，无论你在 string 类型上调用何种方法，都不会对值有改变。")]),n._v(" "),o("p",[n._v("另外对于 null 来说，很多人会认为他是个对象类型，其实这是错误的。虽然 typeof null 会输出 object，但是这只是 JS 存在的一个悠久 Bug。在 JS 的最初版本中使用的是 32 位系统，为了性能考虑使用低位存储变量的类型信息，000 开头代表是对象，然而 null 表示为全零，所以将它错误的判断为 object 。虽然现在的内部类型判断代码已经改变了，但是对于这个 Bug 却是一直流传下来。")]),n._v(" "),o("p",[n._v("对象（Object）类型\n涉及面试题：对象类型和原始类型的不同之处？函数参数是对象会发生什么问题？")]),n._v(" "),o("p",[n._v("在 JS 中，除了原始类型那么其他的都是对象类型了。对象类型和原始类型不同的是，原始类型存储的是值，对象类型存储的是地址（指针）。当你创建了一个对象类型的时候，计算机会在内存中帮我们开辟一个空间来存放值，但是我们需要找到这个空间，这个空间会拥有一个地址（指针）。")]),n._v(" "),o("p",[n._v("const a = []\n对于常量 a 来说，假设内存地址（指针）为 #001，那么在地址 #001 的位置存放了值 []，常量 a 存放了地址（指针） #001，再看以下代码")]),n._v(" "),o("p",[n._v("const a = []\nconst b = a\nb.push(1)\n当我们将变量赋值给另外一个变量时，复制的是原本变量的地址（指针），也就是说当前变量 b 存放的地址（指针）也是 #001，当我们进行数据修改的时候，就会修改存放在地址（指针） #001 上的值，也就导致了两个变量的值都发生了改变。")]),n._v(" "),o("p",[n._v("接下来我们来看函数参数是对象的情况")]),n._v(" "),o("p",[n._v("function test(person) {\nperson.age = 26\nperson = {\nname: 'yyy',\nage: 30\n}")]),n._v(" "),o("p",[n._v("return person\n}\nconst p1 = {\nname: 'yck',\nage: 25\n}\nconst p2 = test(p1)\nconsole.log(p1) // -> ?\nconsole.log(p2) // -> ?\n对于以上代码，你是否能正确的写出结果呢？接下来让我为你解析一番：")]),n._v(" "),o("p",[n._v("首先，函数传参是传递对象指针的副本\n到函数内部修改参数的属性这步，我相信大家都知道，当前 p1 的值也被修改了\n但是当我们重新为 person 分配了一个对象时就出现了分歧，请看下图")]),n._v(" "),o("p",[n._v("所以最后 person 拥有了一个新的地址（指针），也就和 p1 没有任何关系了，导致了最终两个变量的值是不相同的。")]),n._v(" "),o("p",[n._v("typeof vs instanceof\n涉及面试题：typeof 是否能正确判断类型？instanceof 能正确判断对象的原理是什么？")]),n._v(" "),o("p",[n._v("typeof 对于原始类型来说，除了 null 都可以显示正确的类型")]),n._v(" "),o("p",[n._v("typeof 1 // 'number'\ntypeof '1' // 'string'\ntypeof undefined // 'undefined'\ntypeof true // 'boolean'\ntypeof Symbol() // 'symbol'\ntypeof 对于对象来说，除了函数都会显示 object，所以说 typeof 并不能准确判断变量到底是什么类型")]),n._v(" "),o("p",[n._v("typeof [] // 'object'\ntypeof {} // 'object'\ntypeof console.log // 'function'\n如果我们想判断一个对象的正确类型，这时候可以考虑使用 instanceof，因为内部机制是通过原型链来判断的，在后面的章节中我们也会自己去实现一个 instanceof。")]),n._v(" "),o("p",[n._v("const Person = function() {}\nconst p1 = new Person()\np1 instanceof Person // true")]),n._v(" "),o("p",[n._v("var str = 'hello world'\nstr instanceof String // false")]),n._v(" "),o("p",[n._v("var str1 = new String('hello world')\nstr1 instanceof String // true\n对于原始类型来说，你想直接通过 instanceof 来判断类型是不行的，当然我们还是有办法让 instanceof 判断原始类型的")]),n._v(" "),o("p",[n._v("class PrimitiveString {\nstatic "),o("a",{attrs:{href:"x"}},[n._v("Symbol.hasInstance")]),n._v(" {\nreturn typeof x === 'string'\n}\n}\nconsole.log('hello world' instanceof PrimitiveString) // true\n你可能不知道 Symbol.hasInstance 是什么东西，其实就是一个能让我们自定义 instanceof 行为的东西，以上代码等同于 typeof 'hello world' === 'string'，所以结果自然是 true 了。这其实也侧面反映了一个问题， instanceof 也不是百分之百可信的。")]),n._v(" "),o("p",[n._v("类型转换\n涉及面试题：该知识点常在笔试题中见到，熟悉了转换规则就不惧怕此类题目了。")]),n._v(" "),o("p",[n._v("首先我们要知道，在 JS 中类型转换只有三种情况，分别是：")]),n._v(" "),o("p",[n._v("转换为布尔值\n转换为数字\n转换为字符串\n我们先来看一个类型转换表格，然后再进入正题")]),n._v(" "),o("p",[n._v("转 Boolean\n在条件判断时，除了 undefined， null， false， NaN， ''， 0， -0，其他所有值都转为 true，包括所有对象。")]),n._v(" "),o("p",[n._v("对象转原始类型\n对象在转换类型的时候，会调用内置的 [[ToPrimitive]] 函数，对于该函数来说，算法逻辑一般来说如下：")]),n._v(" "),o("p",[n._v("如果已经是原始类型了，那就不需要转换了\n调用 x.valueOf()，如果转换为基础类型，就返回转换的值\n调用 x.toString()，如果转换为基础类型，就返回转换的值\n如果都没有返回原始类型，就会报错\n当然你也可以重写 Symbol.toPrimitive ，该方法在转原始类型时调用优先级最高。")]),n._v(" "),o("p",[n._v("let a = {\nvalueOf() {\nreturn 0\n},\ntoString() {\nreturn '1'\n},\n"),o("a",{attrs:{href:""}},[n._v("Symbol.toPrimitive")]),n._v(" {\nreturn 2\n}\n}\n1 + a // => 3\n四则运算符\n加法运算符不同于其他几个运算符，它有以下几个特点：")]),n._v(" "),o("p",[n._v("运算中其中一方为字符串，那么就会把另一方也转换为字符串\n如果一方不是字符串或者数字，那么会将它转换为数字或者字符串\n1 + '1' // '11'\ntrue + true // 2\n4 + [1,2,3] // \"41,2,3\"\n如果你对于答案有疑问的话，请看解析：")]),n._v(" "),o("p",[n._v("对于第一行代码来说，触发特点一，所以将数字 1 转换为字符串，得到结果 '11'\n对于第二行代码来说，触发特点二，所以将 true 转为数字 1\n对于第三行代码来说，触发特点二，所以将数组通过 toString 转为字符串 1,2,3，得到结果 41,2,3\n另外对于加法还需要注意这个表达式 'a' + + 'b'")]),n._v(" "),o("p",[n._v("'a' + + 'b' // -> \"aNaN\"\n因为 + 'b' 等于 NaN，所以结果为 \"aNaN\"，你可能也会在一些代码中看到过 + '1' 的形式来快速获取 number 类型。")]),n._v(" "),o("p",[n._v("那么对于除了加法的运算符来说，只要其中一方是数字，那么另一方就会被转为数字")]),n._v(" "),o("p",[n._v("4 _ '3' // 12\n4 _ [] // 0\n4 * [1, 2] // NaN\n比较运算符\n如果是对象，就通过 toPrimitive 转换对象\n如果是字符串，就通过 unicode 字符索引来比较\nlet a = {\nvalueOf() {\nreturn 0\n},\ntoString() {\nreturn '1'\n}\n}\na > -1 // true\n在以上代码中，因为 a 是对象，所以会通过 valueOf 转换为原始类型再比较值。")]),n._v(" "),o("p",[n._v("this\n涉及面试题：如何正确判断 this？箭头函数的 this 是什么？")]),n._v(" "),o("p",[n._v("this 是很多人会混淆的概念，但是其实它一点都不难，只是网上很多文章把简单的东西说复杂了。在这一小节中，你一定会彻底明白 this 这个概念的。")]),n._v(" "),o("p",[n._v("我们先来看几个函数调用的场景")]),n._v(" "),o("p",[n._v("function foo() {\nconsole.log(this.a)\n}\nvar a = 1\nfoo()")]),n._v(" "),o("p",[n._v("const obj = {\na: 2,\nfoo: foo\n}\nobj.foo()")]),n._v(" "),o("p",[n._v("const c = new foo()\n接下来我们一个个分析上面几个场景")]),n._v(" "),o("p",[n._v("对于直接调用 foo 来说，不管 foo 函数被放在了什么地方，this 一定是 window\n对于 obj.foo() 来说，我们只需要记住，谁调用了函数，谁就是 this，所以在这个场景下 foo 函数中的 this 就是 obj 对象\n对于 new 的方式来说，this 被永远绑定在了 c 上面，不会被任何方式改变 this\n说完了以上几种情况，其实很多代码中的 this 应该就没什么问题了，下面让我们看看箭头函数中的 this")]),n._v(" "),o("p",[n._v("function a() {\nreturn () => {\nreturn () => {\nconsole.log(this)\n}\n}\n}\nconsole.log(a()()())\n首先箭头函数其实是没有 this 的，箭头函数中的 this 只取决包裹箭头函数的第一个普通函数的 this。在这个例子中，因为包裹箭头函数的第一个普通函数是 a，所以此时的 this 是 window。另外对箭头函数使用 bind 这类函数是无效的。")]),n._v(" "),o("p",[n._v("最后种情况也就是 bind 这些改变上下文的 API 了，对于这些函数来说，this 取决于第一个参数，如果第一个参数为空，那么就是 window。")]),n._v(" "),o("p",[n._v("那么说到 bind，不知道大家是否考虑过，如果对一个函数进行多次 bind，那么上下文会是什么呢？")]),n._v(" "),o("p",[n._v("let a = {}\nlet fn = function () { console.log(this) }\nfn.bind().bind(a)() // => ?\n如果你认为输出结果是 a，那么你就错了，其实我们可以把上述代码转换成另一种形式")]),n._v(" "),o("p",[n._v("// fn.bind().bind(a) 等于\nlet fn2 = function fn1() {\nreturn function() {\nreturn fn.apply()\n}.apply(a)\n}\nfn2()\n可以从上述代码中发现，不管我们给函数 bind 几次，fn 中的 this 永远由第一次 bind 决定，所以结果永远是 window。")]),n._v(" "),o("p",[n._v("let a = { name: 'yck' }\nfunction foo() {\nconsole.log(this.name)\n}\nfoo.bind(a)() // => 'yck'\n以上就是 this 的规则了，但是可能会发生多个规则同时出现的情况，这时候不同的规则之间会根据优先级最高的来决定 this 最终指向哪里。")]),n._v(" "),o("p",[n._v("首先，new 的方式优先级最高，接下来是 bind 这些函数，然后是 obj.foo() 这种调用方式，最后是 foo 这种调用方式，同时，箭头函数的 this 一旦被绑定，就不会再被任何方式所改变。")]),n._v(" "),o("p",[n._v("如果你还是觉得有点绕，那么就看以下的这张流程图吧，图中的流程只针对于单个规则。")])])}),[],!1,null,null,null);t.default=v.exports}}]);